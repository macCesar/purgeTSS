#!/usr/bin/env node

import chalk from 'chalk'
import { readFileSync } from 'fs'
import { Command } from 'commander'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'
import { exec } from 'child_process'
import updateNotifier from 'update-notifier'

// Import refactored modular commands
import { build } from '../src/cli/commands/build.js'
import { create } from '../src/cli/commands/create.js'
import { watchMode } from '../src/cli/commands/watch.js'
import { purgeClasses } from '../src/cli/commands/purge.js'
import { copyModulesLibrary } from '../src/cli/commands/module.js'
import { dependencies } from '../src/cli/commands/dependencies.js'
import { init } from '../src/cli/commands/init.js'
import { shades, colorModule } from '../src/cli/commands/shades.js'
import { buildFonts } from '../src/cli/commands/fonts.js'
import { copyFonts } from '../src/cli/commands/icon-library.js'

// ESM equivalent of __dirname
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Load package.json
const packagePath = join(__dirname, '../package.json')
const pkg = JSON.parse(readFileSync(packagePath, 'utf8'))

// Check if a new version of PurgeTSS is available and print an update notification
const notifier = updateNotifier({ pkg })
if (notifier.update && notifier.update.latest !== pkg.version) {
  notifier.notify({ defer: false, isGlobal: true })
}
const program = new Command()

// Main program setup
program
  .name('purgetss')
  .version(pkg.version)
  .description(`${chalk.green(pkg.description)}\n                     For more information, visit ${chalk.green('https://purgetss.com')}`)
  .option('--debug', 'Display execution time for each process')
  .option('-a, --all', `Run these 3 commands: ${chalk.green('build')}, ${chalk.green('build-fonts')} and ${chalk.green('purgetss')}`)
  .allowUnknownOption(false)
  .action(async (options) => {
    try {
      const result = await purgeClasses(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running purgeClasses:'), error.message)
      process.exit(1)
    }
  })

// Store original help for main program only
const originalHelp = program.helpInformation.bind(program)

// Override only main program help
program.helpInformation = function () {
  if (this.name() === 'purgetss' && this.parent === null) {
    // Custom help for main program only
    let output = []

    // Custom header
    output.push(chalk.green(`\nGenerate a clean ${chalk.yellow('app.tss')} file containing the classes from your XML and JS files`))
    output.push(chalk.green(`The original classes from ${chalk.yellow('app.tss')} are backed up in ${chalk.yellow('_app.tss')}`))
    output.push(chalk.green(`You can create your own custom classes by editing ${chalk.yellow('./purgetss/config.cjs')}`))
    output.push('')

    // Usage
    output.push(`${chalk.yellow('USAGE')}`)
    output.push(`  ${chalk.cyan('purgetss')} [options] [command]`)
    output.push('')

    // Options
    output.push(`${chalk.yellow('OPTIONS')}`)
    output.push(`  ${chalk.cyan('-V, --version')}          Output the version number`)
    output.push(`  ${chalk.cyan('--debug')}                Display execution time for each process`)
    output.push(`  ${chalk.cyan('-a, --all')}              Run these 3 commands: ${chalk.green('build')}, ${chalk.green('build-fonts')} and ${chalk.green('purgetss')}`)
    output.push(`  ${chalk.cyan('-h, --help')}             Display help for command`)
    output.push('')

    // Commands grouped nicely
    output.push(`${chalk.yellow('COMMANDS')}`)
    output.push(`  ${chalk.green('Usage:')} ${chalk.cyan('purgetss')} ${chalk.gray('[command]')}`)
    output.push('')
    output.push(`  ${chalk.green('Initial Setup:')}`)
    output.push(`  ${chalk.cyan('init|i')} ${chalk.gray('[options]')}                Create a ${chalk.yellow('config.cjs')} file for your project`)
    output.push(`  ${chalk.cyan('create|c')} ${chalk.gray('[options]')} ${chalk.gray('<name>')}       Create a new Alloy project with ${chalk.green('PurgeTSS')}`)
    output.push(`  ${chalk.cyan('install-dependencies|id')}         Install ${chalk.green('ESLint')} and ${chalk.green('Tailwind CSS')}`)
    output.push('')
    output.push(`  ${chalk.green('Daily Development:')}`)
    output.push(`  ${chalk.cyan('build|b')} ${chalk.gray('[options]')}               Generate ${chalk.yellow('tailwind.tss')} file`)
    output.push(`  ${chalk.cyan('watch|w')} ${chalk.gray('[options]')}               Auto-run ${chalk.green('PurgeTSS')} on project compilation`)
    output.push(`  ${chalk.cyan('module|m')}                        Copy ${chalk.yellow('purgetss.ui.js')} module to your ${chalk.yellow('lib')} folder`)
    output.push('')
    output.push(`  ${chalk.green('Asset Configuration:')}`)
    output.push(`  ${chalk.cyan('icon-library|il')} ${chalk.gray('[options]')}       Copy icon font libraries to your project`)
    output.push(`  ${chalk.cyan('build-fonts|bf')} ${chalk.gray('[options]')}        Generate ${chalk.yellow('fonts.tss')} from fonts in ${chalk.yellow('./purgetss/fonts')}`)
    output.push(`  ${chalk.cyan('color-module|cm')}                 Copy colors from ${chalk.yellow('config.cjs')} to ${chalk.yellow('lib')} folder`)
    output.push('')
    output.push(`  ${chalk.green('Utilities:')}`)
    output.push(`  ${chalk.cyan('shades|s')} ${chalk.gray('[options]')} ${chalk.gray('[hexcode]')}    Generate color shades from a hex color`)
    output.push('')
    output.push(`  ${chalk.green('Maintenance:')}`)
    output.push(`  ${chalk.cyan('update|u')}                        Update ${chalk.green('PurgeTSS')} to the latest version`)
    output.push(`  ${chalk.cyan('sudo-update|su')}                  Update ${chalk.green('PurgeTSS')} using ${chalk.red('sudo')} command`)

    return output.join('\n') + '\n'
  }

  // Use default help for subcommands
  return originalHelp()
}

// Configure help formatting for individual commands to add colors
program.configureHelp({
  formatHelp: (cmd, helper) => {
    // Only apply to subcommands, not main program
    if (cmd.parent !== null) {
      let output = []

      // Custom colored Usage line
      const fullUsage = helper.commandUsage(cmd)
      const coloredUsage = fullUsage.replace('purgetss', chalk.cyan('purgetss'))
      output.push(`Usage: ${coloredUsage}`)
      output.push('')

      // Description
      if (cmd.description()) {
        output.push(cmd.description())
        output.push('')
      }

      // Arguments
      const visibleArguments = cmd.registeredArguments?.filter(arg => !arg.hidden) || []
      if (visibleArguments.length > 0) {
        output.push('Arguments:')
        visibleArguments.forEach(arg => {
          output.push(`  ${helper.argumentTerm(arg).padEnd(helper.padWidth(cmd, helper) + 2)}${helper.argumentDescription(arg)}`)
        })
        output.push('')
      }

      // Options
      const visibleOptions = cmd.options.filter(option => !option.hidden)
      if (visibleOptions.length > 0) {
        output.push('Options:')
        visibleOptions.forEach(option => {
          output.push(`  ${helper.optionTerm(option).padEnd(helper.padWidth(cmd, helper) + 2)}${helper.optionDescription(option)}`)
        })
        output.push('')
      }

      // Additional help text (from addHelpText)
      const helpText = cmd._getHelpText?.('after')
      if (helpText) {
        output.push(helpText.trim())
      }

      return output.join('\n')
    }

    // For main program, return null to use our custom helpInformation override
    return null
  }
})



// === INITIAL SETUP ===

// Init command
program
  .command('init')
  .alias('i')
  .description(`Create a ${chalk.yellow('config.cjs')} file for your project`)
  .addHelpText('after', `\nCreate a minimal ${chalk.yellow('./purgetss/config.cjs')} file, allowing you to define customizations for new or existing classes`)
  .option('--all', 'Create all files')
  .action(async (options) => {
    try {
      const result = await init(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running init:'), error.message)
      process.exit(1)
    }
  })

// Create command
program
  .command('create <name>')
  .alias('c')
  .description(`Create a new Alloy project with ${chalk.green('PurgeTSS')}`)
  .addHelpText('after', `\nCreates a new Alloy project with ${chalk.green('PurgeTSS')} configured. Requires ${chalk.yellow('app.idprefix')} and ${chalk.yellow('app.workspace')} to be set.`)
  .option('-f, --force', 'Force create even if the project already exists')
  .option('-d, --dependencies', `Install ${chalk.green('ESLint')} and ${chalk.green('Tailwind CSS')} for better development experience`)
  .option('-m, --module', `Install ${chalk.yellow('purgetss.ui.js')} module to project's ${chalk.yellow('lib')} folder`)
  .option('-v, --vendor <arguments>', `Use any of the following arguments to copy specific font vendors:
   ${chalk.yellow('fa')} = Font Awesome Icons
   ${chalk.yellow('mi')} = Material Icons
   ${chalk.yellow('ms')} = Material Symbols
   ${chalk.yellow('f7')} = Framework7 Icons`)
  .action((name, options) => {
    create({ name }, options)
  })

// Install Dependencies command
program
  .command('install-dependencies')
  .alias('id')
  .description(`Install ${chalk.green('ESLint')} and ${chalk.green('Tailwind CSS')} to existing project`)
  .addHelpText('after', '\nInstalls ESLint and Tailwind CSS to improve development workflow with code linting and enhanced UI capabilities.')
  .action(async (options) => {
    try {
      await dependencies(options)
    } catch (error) {
      console.error(chalk.red('Error installing dependencies:'), error.message)
      process.exit(1)
    }
  })

// === DAILY DEVELOPMENT ===

// Build command
program
  .command('build')
  .alias('b')
  .description(`Generate ${chalk.yellow('tailwind.tss')} file`)
  .addHelpText('after', `\nGenerates ${chalk.yellow('tailwind.tss')} file based on attributes in ${chalk.yellow('./purgetss/config.cjs')}\nAlso generates custom ${chalk.yellow('fontawesome.tss')} file if FontAwesome Beta/Pro is installed`)
  .option('--glossary', 'Create a glossary folder with all generated classes')
  .action(async (options) => {
    try {
      const result = await build(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running build:'), error.message)
      process.exit(1)
    }
  })

// Watch mode command
program
  .command('watch')
  .alias('w')
  .description(`Automatically run ${chalk.green('PurgeTSS')} every time you compile your project`)
  .addHelpText('after', `\nAutomatically run ${chalk.green('PurgeTSS')} every time you compile your project\nEspecially helpful with ${chalk.green('LiveView')} as it purges your files with each change you make`)
  .option('-o, --off', 'To turn off watch mode')
  .option('-d, --delete', 'To completely delete the Auto-Purging hook')
  .action((options) => {
    try {
      watchMode(options)
    } catch (error) {
      console.error(chalk.red('Error managing watch mode:'), error.message)
      process.exit(1)
    }
  })

// Module command
program
  .command('module')
  .alias('m')
  .description(`Copy ${chalk.yellow('purgetss.ui.js')} module to your project's ${chalk.yellow('lib')} folder`)
  .addHelpText('after', `\nCopy ${chalk.yellow('purgetss.ui.js')} module to your project's ${chalk.yellow('./app/lib/')} folder. This file contains the Animation module`)
  .action(async (options) => {
    try {
      await copyModulesLibrary(options)
    } catch (error) {
      console.error(chalk.red('Error copying module:'), error.message)
      process.exit(1)
    }
  })

// === ASSET CONFIGURATION ===

// Icon Library command (alias for copy-fonts)
program
  .command('icon-library')
  .alias('il')
  .description('Copy default icon font libraries to your project')
  .addHelpText('after', `\nCopy Font Awesome, Material Icons, Material Symbols or Framework 7 icons to your project's ${chalk.yellow('./app/assets/fonts/')} folder`)
  .option('-v, --vendor <arguments>', `Use any of the following arguments to copy specific font vendors:
   ${chalk.yellow('fa')} = Font Awesome Icons
   ${chalk.yellow('mi')} = Material Icons
   ${chalk.yellow('ms')} = Material Symbols
   ${chalk.yellow('f7')} = Framework7 Icons`)
  .option('-m, --module', `To also copy the corresponding CommonJS modules in ${chalk.yellow('./app/lib/')} folder`)
  .option('-s, --styles', `Copy the corresponding ${chalk.yellow('.tss')} files into ${chalk.yellow('./purgetss/styles/')} folder`)
  .action(async (options) => {
    try {
      await copyFonts(options)
    } catch (error) {
      console.error(chalk.red('Error copying icon libraries:'), error.message)
      process.exit(1)
    }
  })

// Build Fonts command
program
  .command('build-fonts')
  .alias('bf')
  .description(`Generate ${chalk.yellow('fonts.tss')} from font and CSS files in ${chalk.yellow('./purgetss/fonts')}`)
  .addHelpText('after', `\nGenerates ${chalk.yellow('./purgetss/styles/fonts.tss')} file from font and CSS files in ${chalk.yellow('./purgetss/fonts')} folder`)
  .option('-f, --font-class-from-filename', 'Use the font\'s filename as the name of the font class instead of the font family\'s name.')
  .option('-m, --module', `Generate a CommonJS module in the ${chalk.yellow('./app/lib/')} folder called ${chalk.yellow('purgetss-fonts.js')} containing all font classes for both regular fonts and font icons.`)
  .action(async (options) => {
    try {
      const result = await buildFonts(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running build-fonts:'), error.message)
      process.exit(1)
    }
  })

// Color Module command
program
  .command('color-module')
  .alias('cm')
  .description(`Copy all colors from ${chalk.yellow('config.cjs')} to your ${chalk.yellow('lib')} folder`)
  .addHelpText('after', `\nCopies all colors from ${chalk.yellow('./purgetss/config.cjs')} into a CommonJS module in project's ${chalk.yellow('lib')} folder`)
  .action(async (options) => {
    try {
      const result = await colorModule(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running color-module:'), error.message)
      process.exit(1)
    }
  })

// === UTILITIES ===

// Shades command
program
  .command('shades [hexcode] [name]')
  .alias('s')
  .description(`Generate color shades for ${chalk.yellow('config.cjs')} from a given hexcolor`)
  .addHelpText('after', `\nGenerates color shades from hexcolor. By default, places new shades in ${chalk.yellow('theme.extend.colors')}`)
  .option('-n, --name', 'Specify the name of the color')
  .option('-q, --quotes', `Keep double quotes in ${chalk.yellow('config.cjs')}`)
  .option('-r, --random', 'Generate shades from a random color')
  .option('-o, --override', `Place new shades in ${chalk.yellow('theme.colors')} to override default colors`)
  .option('-s, --single', 'Generate a single color definition')
  .option('-l, --log', 'Log shades instead of saving them')
  .option('-j, --json', `Log shades in ${chalk.yellow('app/config.json')} format`)
  .option('-t, --tailwind', `Log shades in ${chalk.yellow('tailwind.config.js')} format`)
  .action(async (hexcode, name, options) => {
    try {
      const result = await shades({ hexcode, name }, options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running shades:'), error.message)
      process.exit(1)
    }
  })

// === MAINTENANCE ===

// Update command
program
  .command('update')
  .alias('u')
  .description(`Update ${chalk.green('PurgeTSS')} to the latest version`)
  .addHelpText('after', `\nUpdates ${chalk.green('PurgeTSS')} to latest version\nConstant updates include new features and bug fixes`)
  .action(() => {
    console.log(`${chalk.green('::PurgeTSS::')} Updating ${chalk.green('PurgeTSS')} to the latest version...`)

    exec('npm update -g purgetss', (error, stdout, stderr) => {
      if (error) {
        console.log(`${chalk.green('::PurgeTSS::')} error: ${error.message}`)
        return
      }

      if (stderr) {
        console.log(`${chalk.green('::PurgeTSS::')} stderr: ${stderr}`)
        return
      }

      console.log(`${chalk.green('::PurgeTSS::')} Done!`)
    })
  })

// Sudo Update command
program
  .command('sudo-update')
  .alias('su')
  .description(`Update ${chalk.green('PurgeTSS')} to the latest version using the ${chalk.yellow('sudo')} command`)
  .addHelpText('after', `\nUpdates ${chalk.green('PurgeTSS')} to latest version using ${chalk.yellow('sudo')} command\nConstant updates include new features and bug fixes`)
  .action(() => {
    console.log(`${chalk.green('::PurgeTSS::')} Updating ${chalk.green('PurgeTSS')} to the latest version using sudo...`)

    exec('sudo npm update -g purgetss', (error, stdout, stderr) => {
      if (error) {
        console.log(`${chalk.green('::PurgeTSS::')} error: ${error.message}`)
        return
      }

      if (stderr) {
        console.log(`${chalk.green('::PurgeTSS::')} stderr: ${stderr}`)
        return
      }

      console.log(`${chalk.green('::PurgeTSS::')} Done!`)
    })
  })

// Function to calculate string similarity (Levenshtein distance)
function calculateSimilarity(str1, str2) {
  const matrix = []
  
  // Create distance matrix
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i]
  }
  
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j
  }
  
  // Fill the matrix
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1]
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // substitution
          matrix[i][j - 1] + 1,     // insertion
          matrix[i - 1][j] + 1      // deletion
        )
      }
    }
  }
  
  return matrix[str2.length][str1.length]
}

// Function to find similar commands
function findSimilarCommands(input, validCommands) {
  const suggestions = []
  
  validCommands.forEach(cmd => {
    const distance = calculateSimilarity(input.toLowerCase(), cmd.toLowerCase())
    const similarity = 1 - (distance / Math.max(input.length, cmd.length))
    
    // Suggest commands with similarity > 0.4 or that start with the same letter
    if (similarity > 0.4 || cmd.toLowerCase().startsWith(input.toLowerCase().charAt(0))) {
      suggestions.push({ command: cmd, similarity })
    }
  })
  
  // Sort by similarity and return top 3
  return suggestions
    .sort((a, b) => b.similarity - a.similarity)
    .slice(0, 3)
    .map(s => s.command)
}

// Validate arguments before parsing
const args = process.argv.slice(2)
if (args.length > 0) {
  const validCommands = ['init', 'i', 'create', 'c', 'install-dependencies', 'id', 'build', 'b', 'watch', 'w', 'icon-library', 'il', 'build-fonts', 'bf', 'color-module', 'cm', 'shades', 's', 'module', 'm', 'update', 'u', 'sudo-update', 'su']
  const validFlags = ['-h', '--help', '-V', '--version', '--debug', '-a', '--all']

  const firstArg = args[0]

  // Check if it's an unknown flag (starts with - but not in valid flags)
  if (firstArg.startsWith('-') && !validFlags.includes(firstArg)) {
    console.log(chalk.red(`\nUnknown option: ${firstArg}`))
    console.log(chalk.yellow('\nFor help, run: purgetss -h'))
    process.exit(1)
  }

  // Check if it's an unknown command (doesn't start with - and not in valid commands)
  if (!firstArg.startsWith('-') && !validCommands.includes(firstArg)) {
    console.log(chalk.red(`\nUnknown command: ${firstArg}`))
    
    // Find similar commands and suggest them
    const suggestions = findSimilarCommands(firstArg, validCommands)
    if (suggestions.length > 0) {
      console.log(chalk.yellow('Did you mean one of these?'))
      suggestions.forEach(suggestion => {
        // Get the command info to show alias if available
        const commandInfo = program.commands.find(cmd => 
          cmd.name() === suggestion || cmd.alias() === suggestion
        )
        
        if (commandInfo) {
          const displayName = commandInfo.alias() 
            ? `${commandInfo.name()}|${commandInfo.alias()}` 
            : commandInfo.name()
          console.log(`  ${chalk.cyan(displayName)}`)
        } else {
          console.log(`  ${chalk.cyan(suggestion)}`)
        }
      })
    } else {
      console.log(chalk.yellow('\nFor help, run: purgetss -h'))
    }
    process.exit(1)
  }
}

// Parse arguments
program.parse(process.argv)
