#!/usr/bin/env node

const chalk = require('chalk');
const program = require('caporal');
const pkg = require('../package.json');
const purgetss = require('../index.js');
const package = require('../package.json');
const updateNotifier = require('update-notifier');

// check if a new version of PurgeTSS is available and print an update notification
const notifier = updateNotifier({ pkg });
if (notifier.update && notifier.update.latest !== pkg.version) {
	notifier.notify({ defer: false, isGlobal: true })
}

program
	.version(package.version)
	.description(package.description + '\n\nPlease visit ' + chalk.yellow('https://github.com/macCesar/purgeTSS') + ' for details.')
	.help('PurgeTSS will create a clean app.tss file by copying only the classes used in your XML Files.\n\nIt works with tailwind.tss, fontawesome.tss, materialdesignicons.tss, lineicons.tss, boxicons.tss, framework7icons.tss.\n\nALL your classes from your original app.tss file will be copied over without purging.\n\nYou can create your own custom classes and values by running `purgetss init` and `purgetss build`.')
	.action((args, options, logger) => {
		purgetss.purgeClasses(options);
	});

program
	.command('init')
	.alias('i')
	.description('Create a `config.js` file for your project')
	.help('Creates a minimal `./purgetss/config.js` file at the root of your project.')
	.action((args, options, logger) => {
		purgetss.init();
	});

program
	.command('create')
	.alias('c')
	.description('Creates a new Alloy Project with `purgetss` already configured.')
	.help('Creates a new Alloy Project with `purgetss` already configured.')
	.option('-v, --vendor <arguments>', 'Use any of the following arguments to copy specific vendors:\n   fa = Font Awesome Icons\n   md = Material Design Icons\n   li = LineIcons\n   bx = Boxicons\n   f7 = Framework7 Icons')
	.argument('<name>', 'The name of the project')
	.action((args, options, logger) => {
		purgetss.create(args, options);
	});

program
	.command('build')
	.alias('b')
	.description('Build a custom `tailwind.tss` file')
	.help('It will generate a new custom `tailwind.tss` file based on the attributes defined in `./purgetss/config.js`.')
	.action((args, options, logger) => {
		purgetss.buildCustom();
	});

program
	.command('watch')
	.alias('w')
	.description('Autorun `purgetss` every time you compile your project')
	.help('Use this command if you want `purgetss` to autorun every time you compile your project. This is very useful in combination with `LiveView` because it will purge all your files every time you make a change, for example when adding or deleting styles in your Views.')
	.option('-o, --off', 'To turn off watch mode.')
	.action((args, options, logger) => {
		purgetss.watchMode(options);
	});

program
	.command('fonts')
	.alias('f')
	.description('Copy Font Awesome icons, Material Design Icons, LineIcons, Boxicons and Framework7-Icons Font files into your project')
	.help('Command to copy the Free versions of:\n\n   • Font Awesome Icons ( Brands, Regular, Solid )\n   • Material Design Icons\n   • LineIcons\n   • Boxicons\n   • Framework7 Icons\n\nInto your projects’s app/assets/fonts/ folder.\n\nWith their names fixed to work with your app whether it is for iOS or for Android.')
	.option('-v, --vendor <arguments>', 'Use any of the following arguments to copy specific vendors:\n   fa = Font Awesome Icons\n   md = Material Design Icons\n   li = LineIcons\n   bx = Boxicons\n   f7 = Framework7 Icons')
	.option('-m, --modules', 'Use the `--modules` option to also copy the corresponding CommonJS module into `./app/lib/` folder.')
	.action((args, options, logger) => {
		purgetss.copyFonts(options);
	});

program
	.command('module')
	.alias('m')
	.description('Copy `purgetss.ui.js` module into your project’s `lib` folder.')
	.help('This file contains the module `Animation` \n')
	.action((args, options, logger) => {
		purgetss.copyModulesLibrary();
	});

program
	.command('update')
	.alias('u')
	.description('Update PurgeTSS to the latest version')
	.help('Run auto-update regularly!\n\nWe constantly update PurgeTSS to add new features, to include the latest versions of Tailwind and for bug fixes.')
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating PurgeTSS to the latest version...`);

		const { exec } = require("child_process");

		exec("npm update -g purgetss", (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.command('sudo-update')
	.alias('su')
	.description('Update PurgeTSS to the latest version using sudo')
	.help('Run auto-update regularly!\n\nWe constantly update PurgeTSS to add new features, to include the latest versions of Tailwind and for bug fixes.')
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating PurgeTSS to the latest version using sudo...`);

		const { exec } = require("child_process");

		exec("sudo npm update -g purgetss", (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.parse(process.argv);
