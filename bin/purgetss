#!/usr/bin/env node

const chalk = require('chalk');
const program = require('caporal');
const purgetss = require('../index.js');
const package = require('../package.json');

program
	.version(package.version)
	.description(package.description + '\n\nPlease visit ' + chalk.yellow('https://github.com/macCesar/purgeTSS') + ' for details.')
	.help('purgeTSS will create a clean app.tss file by copying only the classes used in your XML Files.\n\nIt works with tailwind.tss, fontawesome.tss, materialdesignicons.tss, lineicons.tss.\n\nALL your classes from your original app.tss file will be copied over without purging.\n\nYou can create your own custom classes and values by running `purgetss init` and `purgetss build`.')
	.action((args, options, logger) => {
		purgetss.purgeClasses(options);
	});

program
	.command('init')
	.alias('i')
	.description('Create a `config.js` file for your project')
	.help('Creates a minimal `./purgetss/config.js` file at the root of your project.')
	.action((args, options, logger) => {
		purgetss.init();
	});

program
	.command('build')
	.alias('b')
	.description('Build a custom `tailwind.tss` file')
	.help('It will generate a new custom `tailwind.tss` file based on the attributes defined in `./purgetss/config.js`.')
	.action((args, options, logger) => {
		purgetss.buildCustom();
	});

program
	.command('watch')
	.alias('w')
	.description('Autorun `purgetss` every time you compile your project')
	.help('Use this command if you want `purgetss` to autorun every time you compile your project. This is very useful in combination with `LiveView` because it will purge all your files every time you make a change, for example when adding or deleting styles in your Views.')
	.option('-o, --off', 'To turn off watch mode.')
	.action((args, options, logger) => {
		purgetss.watchMode(options);
	});

program
	.command('fonts')
	.alias('f')
	.description('Copy Font Awesome icons, Material Design Icons and LineIcons Fonts into your project')
	.help('Command to copy the Free versions of:\n\n   • Font Awesome Icons ( Brands, Regular, Solid )\n   • Material Design Icons\n   • LineIcons\n\nInto your projects’s app/assets/fonts/ folder.\n\nWith their names fixed to work with your app whether it is for iOS or for Android.')
	.option('-v, --vendor <arguments>', 'Use any of the following arguments to copy specific vendors:\n   fa = Font Awesome Icons\n   md = Material Design Icons\n   li = LineIcons')
	.option('-m, --modules', 'Use the `--modules` option to also copy the corresponding CommonJS module into `./app/lib/` folder.')
	.action((args, options, logger) => {
		purgetss.copyFonts(options);
	});

// program
// 	.command('library')
// 	.alias('l')
// 	.description('Copy `fontawesome.js`, `lineicons.js` and `materialdesignicons.js` libraries into your project')
// 	.help('Each library contains a CommonJS module exposing the UniCode strings for Font Awesome icons, Line Icons and Material Design Icons\n')
// 	.option('-v, --vendor <arguments>', 'Use any of the following arguments to copy specific vendors:\n   fa = Font Awesome Icons\n   md = Material Design Icons\n   li = LineIcons')
// 	.action((args, options, logger) => {
// 		purgetss.copyFontLibraries(options);
// 	});

program
	.command('update')
	.alias('u')
	.description('Update purgeTSS to the latest version')
	.help('Run auto-update regularly!\n\nWe constantly update purgeTSS to add new features, to include the latest versions of Tailwind and for bug fixes.')
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating purgeTSS to the latest version...`);

		const { exec } = require("child_process");

		exec("npm update -g purgetss", (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.command('sudo-update')
	.alias('su')
	.description('Update purgeTSS to the latest version using sudo')
	.help('Run auto-update regularly!\n\nWe constantly update purgeTSS to add new features, to include the latest versions of Tailwind and for bug fixes.')
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating purgeTSS to the latest version using sudo...`);

		const { exec } = require("child_process");

		exec("sudo npm update -g purgetss", (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.command('dev')
	.alias('d')
	.description('Copy all available classes into `app.tss` ' + chalk.yellow('( NO LONGER RECOMMENDED )'))
	.help('Use this command if you want to copy all available styles from tailwind.tss ( or from a custom tailwind.tss when available ), fontawesome.tss, materialdesignicons.tss, lineicons.tss files into app.tss while prototyping your App.')
	.option('-f, --files <arguments>', 'Use any of the following arguments to copy styles from an specific provider:\n   tw = Tailwind styles\n   fa = Font Awesome styles\n   md = Material Design styles\n   li = LineIcons styles\n   custom = custom tailwind.tss styles')
	.action((args, options, logger) => {
		purgetss.devMode(options);
	});

// Deprecated commands and will be removed in v3
program
	.command('auto-update')
	.description(chalk.yellow('Deprecated command and will be removed in v3') + ', use `purgetss update` instead')
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating purgeTSS to the latest version...`);

		const { exec } = require("child_process");

		exec("npm update -g purgetss", (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.command('build-custom')
	.description(chalk.yellow('Deprecated command and will be removed in v3') + ', use `purgetss build` instead')
	.action((args, options, logger) => {
		purgetss.buildCustom();
	});

program
	.command('copy-fonts')
	.description(chalk.yellow('Deprecated command and will be removed in v3') + ', use `purgetss fonts` instead')
	.option('-f, --files <arguments>', 'Use any of the following arguments to copy specific vendors:\n   fa = Font Awesome Icons\n   md = Material Design Icons\n   li = LineIcons')
	.action((args, options, logger) => {
		purgetss.copyFonts(options);
	});

program
	.command('dev-mode')
	.description(chalk.yellow('Deprecated command and will be removed in v3') + ', use `purgetss dev` instead')
	.option('-f, --files <arguments>', 'Use any of the following arguments to copy styles from an specific provider:\n   tw = Tailwind styles\n   fa = Font Awesome styles\n   md = Material Design styles\n   li = LineIcons styles\n   custom = custom tailwind.tss styles')
	.action((args, options, logger) => {
		purgetss.devMode(options);
	});

program
	.parse(process.argv);
