#!/usr/bin/env node

const chalk = require('chalk');
const program = require('caporal');
const pkg = require('../package.json');
const purgetss = require('../index.js');
const package = require('../package.json');
const updateNotifier = require('update-notifier');

// check if a new version of PurgeTSS is available and print an update notification
const notifier = updateNotifier({ pkg });
if (notifier.update && notifier.update.latest !== pkg.version) {
	notifier.notify({ defer: false, isGlobal: true });
}

program
	.version(package.version)
	.description(package.description + '\n\nPlease visit ' + chalk.yellow('https://github.com/macCesar/purgeTSS') + ' for details.')
	.help('PurgeTSS will create a clean app.tss file with only the classes used in your XML Files.\n\nIt works with tailwind.tss, fontawesome.tss, materialdesignicons.tss, framework7icons.tss.\n\nYour original classes will be backed up in _app.tss.\n\nYou can create your own custom classes and values by running `purgetss init` and `purgetss build`.')
	.option('-d, --debug', 'Show time taken to execute each process.')
	.option('-a, --all', 'Run all processes. purgetss build-fonts, purgetss build and purgetss')
	.action((args, options, logger) => {
		purgetss.purgeClasses(options);
	});

program
	.command('init')
	.alias('i')
	.description('Create a `config.js` file for your project.')
	.help('Creates a minimal `./purgetss/config.js` file at the root of your project.')
	.action((args, options, logger) => {
		purgetss.init(options);
	});

program
	.command('create')
	.alias('c')
	.description('Creates a new Alloy Project with `purgetss` already configured.')
	.help('Creates a new Alloy Project with `purgetss` already configured.')
	.option('-t, --tailwind', 'To install Tailwind CSS in your project to work with `Tailwind CSS Intellisense` extenstion in VS Code.')
	.option('-v, --vendor <arguments>', 'Use any of the following arguments to copy specific vendors:\n   fa = Font Awesome Icons\n   md = Material Design Icons\n   f7 = Framework7 Icons')
	.argument('<name>', 'The name of the project')
	.action((args, options, logger) => {
		purgetss.create(args, options);
	});

program
	.command('build')
	.alias('b')
	.description('Build a custom `tailwind.tss` file.')
	.help('It will generate a new custom `tailwind.tss` file based on the attributes defined in `./purgetss/config.js`.\n\nIt will also generate a custom `fontawesome.tss` file if you installed the proper dependencies, like FontAwesome Beta or FontAwesome Pro.')
	.action((args, options, logger) => {
		purgetss.buildCustom();
	});

program
	.command('watch')
	.alias('w')
	.description('Autorun `purgetss` every time you compile your project.')
	.help('Use this command if you want `purgetss` to autorun every time you compile your project.\n\nThis is very useful in combination with `LiveView` by purging your files every time you make a change.')
	.option('-o, --off', 'To turn off watch mode.')
	.action((args, options, logger) => {
		purgetss.watchMode(options);
	});

program
	.command('fonts')
	.alias('f')
	.description('Copy Font Awesome icons, Material Design Icons and Framework7-Icons Font files into your project.')
	.help('Command to copy the Free versions of:\n\n   • Font Awesome Icons ( Brands, Regular, Solid )\n   • Material Design Icons\n\nInto your projects’s app/assets/fonts/ folder.\n\nWith their names fixed to work with your app whether it is for iOS or for Android.')
	.option('-v, --vendor <arguments>', 'Use any of the following arguments to copy specific vendors:\n   fa = Font Awesome Icons\n   md = Material Design Icons\n   f7 = Framework7 Icons')
	.option('-m, --modules', 'Use the `--modules` option to also copy the corresponding CommonJS module into `./app/lib/` folder.')
	.action((args, options, logger) => {
		purgetss.copyFonts(options);
	});

program
	.command('build-fonts')
	.alias('bf')
	.description('Build a custom `fonts.tss` file.')
	.help('It will generate a new custom `fonts.tss` file based on the fonts and css files located in `./purgetss/fonts` folder.')
	.option('-m, --modules', 'Use the `--modules` option to also generate a CommonJS module into `./app/lib/` folder called `purgetss-fonts.js`.')
	.action((args, options, logger) => {
		purgetss.buildCustomFonts(options);
	});

program
	.command('module')
	.alias('m')
	.description('Copy `purgetss.ui.js` module into your project’s `lib` folder.')
	.help('This file contains the module `Animation` \n')
	.action((args, options, logger) => {
		purgetss.copyModulesLibrary();
	});

program
	.command('update')
	.alias('u')
	.description('Update PurgeTSS to the latest version.')
	.help('Please run update regularly!\n\nWe constantly update PurgeTSS to add new features, to include the latest versions of Tailwind and for bug fixes.')
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating PurgeTSS to the latest version...`);

		const { exec } = require('child_process');

		exec('npm update -g purgetss', (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.command('sudo-update')
	.alias('su')
	.description('Update PurgeTSS to the latest version using the `sudo` command.')
	.help('Please run sudo-update regularly!\n\nWe constantly update PurgeTSS to add new features, to include the latest versions of Tailwind and for bug fixes.')
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating PurgeTSS to the latest version using sudo...`);

		const { exec } = require('child_process');

		exec('sudo npm update -g purgetss', (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.parse(process.argv);
