#!/usr/bin/env node

const chalk = require('chalk');
const program = require('caporal');
const pkg = require('../package.json');
const purgetss = require('../index.js');
const updateNotifier = require('update-notifier');

// check if a new version of PurgeTSS is available and print an update notification
const notifier = updateNotifier({ pkg });
if (notifier.update && notifier.update.latest !== pkg.version) {
	notifier.notify({ defer: false, isGlobal: true });
}

program
	.version(pkg.version)
	.description(`${pkg.description}\n                     Visit ${chalk.green('https://purgetss.com')} for more details.`)
	.argument('[command]', 'See the list of available commands below')
	.help(chalk.green(`${chalk.green('PurgeTSS')} will create a clean ${chalk.yellow('app.tss')} file with only the classes used in your XML Files\nThe original classes from ${chalk.yellow('app.tss')} will be backed up in ${chalk.yellow('_app.tss')}\nYou can create your own custom classes by editing ${chalk.yellow('purgetss/config.js')}`))
	.option('-d, --debug', 'Displays execution time for each process')
	.option('-a, --all', `Runs all 3 main commands: ${chalk.green('build')}, ${chalk.green('build-fonts')} and ${chalk.green('purgetss')}`)
	.action((args, options, logger) => {
		purgetss.purgeClasses(options);
	});

program
	.command('init')
	.alias('i')
	.description(`Creates a ${chalk.yellow('config.js')} file for your project`)
	.help(`Creates a minimal ${chalk.yellow('./purgetss/config.js')} file where you can define any customization for existing or new classes`)
	.action((args, options, logger) => {
		purgetss.init(options);
	});

program
	.command('create')
	.alias('c')
	.description(`Creates a new Alloy Project with ${chalk.green('PurgeTSS')} configured`)
	.help(`Creates a new Alloy Project with ${chalk.green('PurgeTSS')} configured. You’ll need to have ${chalk.yellow('app.idprefix')} and ${chalk.yellow('app.workspace')} already configured.`)
	.option('-f, --force', 'To overwrite an existing project')
	.option('-t, --tailwind', `To install ${chalk.green('Tailwind CSS')} in your project for Tailwind CSS Intellisense VS Code extension`)
	.option('-v, --vendor <arguments>', `Use any of the following arguments to copy specific font vendors:\n   ${chalk.yellow('fa')} = Font Awesome Icons\n   ${chalk.yellow('md')} = Material Design Icons\n   ${chalk.yellow('ms')} = Material Symbols\n   ${chalk.yellow('f7')} = Framework7 Icons`)
	.argument('<name>', 'The name of the project')
	.action((args, options, logger) => {
		purgetss.create(args, options);
	});

program
	.command('build')
	.alias('b')
	.description(`Builds a new ${chalk.yellow('tailwind.tss')} file`)
	.option('--glossary', 'Creates a glossary folder with all generated classes')
	.help(`It will generate a ${chalk.yellow('tailwind.tss')} file based on the attributes defined in ${chalk.yellow('./purgetss/config.js')}\nIt will also generate a custom ${chalk.yellow('fontawesome.tss')} file if you installed the proper dependencies, like FontAwesome Beta or FontAwesome Pro`)
	.action((args, options, logger) => {
		purgetss.build(options);
	});

program
	.command('build-legacy')
	.alias('bl')
	.description(`Builds a Legacy ${chalk.yellow('tailwind.tss')} file`)
	.help(`It will generate a Legacy ${chalk.green('tailwind.tss')} file based on the attributes defined in ${chalk.yellow('./purgetss/config.js')}\nIt will also generate a custom ${chalk.yellow('fontawesome.tss')} file if you installed the proper dependencies, like FontAwesome Beta or FontAwesome Pro`)
	.action((args, options, logger) => {
		purgetss.buildLegacy();
	});

program
	.command('shades')
	.alias('s')
	.argument('[hexcode]', 'The base hexcode value')
	.argument('[name]', 'Name of the color shades')
	.option('-q, --quotes', 'Keep double quotes in config.js')
	.option('-r, --random', 'Generates shades from a random color')
	.option('-l, --log', `Log the generated shades instead of saving them`)
	.description(`Color shades generator from a given hexcolor`)
	.help(`Generates color shades from a given hexcolor to use in your project`)
	.action((args, options, logger) => {
		purgetss.shades(args, options);
	});

program
	.command('watch')
	.alias('w')
	.description(`Auto-runs ${chalk.green('PurgeTSS')} every time you compile your project`)
	.help(`Auto-runs ${chalk.green('PurgeTSS')} every time you compile your project\nThis is very useful in combination with ${chalk.green('LiveView')} by purging your files every time you make a change`)
	.option('-o, --off', 'To turn off watch mode')
	.action((args, options, logger) => {
		purgetss.watchMode(options);
	});

program
	.command('fonts')
	.alias('f')
	.description('Copies default icon font libraries into your project')
	.help(`Copy Font Awesome (Brands, Regular, Solid), Material Design, Material Symbols or Framework 7 icons,\ninto your projects’s ${chalk.yellow('app/assets/fonts/')} folder and their names fixed to work on iOS and Android`)
	.option('-v, --vendor <arguments>', `Use any of the following arguments to copy specific font vendors:\n   ${chalk.yellow('fa')} = Font Awesome Icons\n   ${chalk.yellow('md')} = Material Design Icons\n   ${chalk.yellow('ms')} = Material Symbols\n   ${chalk.yellow('f7')} = Framework7 Icons`)
	.option('-m, --modules', `Use the --modules option to also copy the corresponding CommonJS module into ${chalk.yellow('./app/lib/')} folder`)
	.action((args, options, logger) => {
		purgetss.copyFonts(options);
	});

program
	.command('build-fonts')
	.alias('bf')
	.description(`Builds a ${chalk.yellow('fonts.tss')} file from fonts and styles in ${chalk.yellow('./purgetss/fonts')}`)
	.help(`It will generate a new ${chalk.yellow('fonts.tss')} file based on the fonts and css files located in ${chalk.yellow('./purgetss/fonts')} folder`)
	.option('-m, --modules', `Use the --modules option to also generate a CommonJS module into ${chalk.yellow('./app/lib/')} folder called ${chalk.yellow('purgetss-fonts.js')}`)
	.action((args, options, logger) => {
		purgetss.buildFonts(options);
	});

program
	.command('module')
	.alias('m')
	.description(`Copies ${chalk.yellow('purgetss.ui.js')} module into your project’s ${chalk.yellow('lib')} folder`)
	.help('This file contains the Animation module\n')
	.action((args, options, logger) => {
		purgetss.copyModulesLibrary();
	});

program
	.command('update')
	.alias('u')
	.description(`Updates ${chalk.green('PurgeTSS')} to the latest version`)
	.help(`Please run update regularly!\nWe constantly update ${chalk.green('PurgeTSS')} to add new features, to include the latest version of ${chalk.green('Tailwind CSS')} and bug fixes`)
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating ${chalk.green('PurgeTSS')} to the latest version...`);

		const { exec } = require('child_process');

		exec('npm update -g purgetss', (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.command('sudo-update')
	.alias('su')
	.description(`Updates ${chalk.green('PurgeTSS')} to the latest version using the ${chalk.yellow('sudo')} command`)
	.help(`Please run sudo-update regularly!\nWe constantly update ${chalk.green('PurgeTSS')} to add new features, to include the latest version of ${chalk.green('Tailwind CSS')} and bug fixes`)
	.action((args, options, logger) => {
		logger.info(`${purgetss.colores.purgeLabel} Updating ${chalk.green('PurgeTSS')} to the latest version using sudo...`);

		const { exec } = require('child_process');

		exec('sudo npm update -g purgetss', (error, stdout, stderr) => {
			if (error) {
				logger.info(`${purgetss.colores.purgeLabel} error: ${error.message}`);
				return;
			}

			if (stderr) {
				logger.info(`${purgetss.colores.purgeLabel} stderr: ${stderr}`);
				return;
			}

			logger.info(`${purgetss.colores.purgeLabel} Done!`);
		});
	});

program
	.parse(process.argv);
