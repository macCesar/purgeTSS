#!/usr/bin/env node

import chalk from 'chalk'
import { readFileSync } from 'fs'
import { Command } from 'commander'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'
import { exec } from 'child_process'
import updateNotifier from 'update-notifier'

// Import refactored modular commands
import { build } from '../src/cli/commands/build.js'
import { create } from '../src/cli/commands/create.js'
import { watchMode } from '../src/cli/commands/watch.js'
import { purgeClasses } from '../src/cli/commands/purge.js'
import { copyModulesLibrary } from '../src/cli/commands/module.js'
import { dependencies } from '../src/cli/commands/dependencies.js'
import { init } from '../src/cli/commands/init.js'
import { shades, colorModule } from '../src/cli/commands/shades.js'
import { buildFonts } from '../src/cli/commands/fonts.js'
import { copyFonts } from '../src/cli/commands/icon-library.js'

// ESM equivalent of __dirname
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Load package.json
const packagePath = join(__dirname, '../package.json')
const pkg = JSON.parse(readFileSync(packagePath, 'utf8'))

// Check if a new version of PurgeTSS is available and print an update notification
const notifier = updateNotifier({ pkg })
if (notifier.update && notifier.update.latest !== pkg.version) {
  notifier.notify({ defer: false, isGlobal: true })
}
const program = new Command()

// Main program setup
program
  .name('purgetss')
  .version(pkg.version)
  .description('')  // Empty description to avoid duplication
  .option('--debug', 'Display execution time for each process')
  .option('-a, --all', `Run these 3 commands: ${chalk.green('build')}, ${chalk.green('build-fonts')} and ${chalk.green('purgetss')}`)
  .allowUnknownOption(false)
  .action(async (options) => {
    try {
      const result = await purgeClasses(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running purgeClasses:'), error.message)
      process.exit(1)
    }
  })

// Add custom help text to organize commands like Caporal V6
program.addHelpText('before', `
${chalk.cyan('purgetss')} ${chalk.green(pkg.version)} - ${chalk.green(pkg.description)}
                 For more information, visit ${chalk.green('https://purgetss.com')}

${chalk.yellow('USAGE')}
  ${chalk.cyan('purgetss')}

  Generate a clean ${chalk.yellow('app.tss')} file containing only the classes used in your XML and JS files.
  Original ${chalk.yellow('app.tss')} content is backed up as ${chalk.yellow('_app.tss')}.
  Define custom classes by editing ${chalk.yellow('./purgetss/config.cjs')}.
`)

program.addHelpText('after', `

${chalk.yellow('COMMANDS')}
  ${chalk.green('Usage:')} ${chalk.cyan('purgetss')} ${chalk.gray('[command]')}

  ${chalk.green('Available commands:')}
  ${chalk.cyan('init|i')} ${chalk.gray('[options]')}                Create a ${chalk.yellow('config.cjs')} file for your project
  ${chalk.cyan('create|c')} ${chalk.gray('[options]')} ${chalk.gray('<name>')}       Create a new Alloy project with ${chalk.green('PurgeTSS')} configured
  ${chalk.cyan('install-dependencies|id')}         Install ${chalk.green('ESLint')} and ${chalk.green('Tailwind CSS')} dependencies

  ${chalk.cyan('build|b')} ${chalk.gray('[options]')}               Generate a new ${chalk.yellow('tailwind.tss')} file
  ${chalk.cyan('watch|w')} ${chalk.gray('[options]')}               Auto-run ${chalk.green('PurgeTSS')} on every project compile
  ${chalk.cyan('module|m')}                        Copy ${chalk.yellow('purgetss.ui.js')} module to your ${chalk.yellow('lib')} folder

  ${chalk.cyan('icon-library|il')} ${chalk.gray('[options]')}       Copy icon font libraries to your project
  ${chalk.cyan('build-fonts|bf')} ${chalk.gray('[options]')}        Generate ${chalk.yellow('fonts.tss')} from fonts in ${chalk.yellow('./purgetss/fonts')}
  ${chalk.cyan('color-module|cm')}                 Copy colors from ${chalk.yellow('config.cjs')} to your ${chalk.yellow('lib')} folder

  ${chalk.cyan('shades|s')} ${chalk.gray('[options]')} ${chalk.gray('[hexcode]')}    Generate color shades from a hex color

  ${chalk.cyan('update|u')}                        Update ${chalk.green('PurgeTSS')} to the latest version
  ${chalk.cyan('sudo-update|su')}                  Update ${chalk.green('PurgeTSS')} using ${chalk.red('sudo')} command`)

// Configure command groups for better organization
program.configureHelp({
  sortSubcommands: true,
  subcommandTerm: (cmd) => cmd.name() + (cmd.alias() ? `|${cmd.alias()}` : ''),
  argumentTerm: (arg) => `${arg.name()}`,
  optionTerm: (option) => option.flags,
  showGlobalOptions: false,
  formatHelp: (cmd, helper) => {
    // Custom help format to show only our custom styled options
    let output = [];

    // Add custom OPTIONS section with our styling
    output.push(`${chalk.yellow('OPTIONS')}`);
    output.push(`  ${chalk.cyan('--debug')}                Display execution time for each process`);
    output.push(`  ${chalk.cyan('-h, --help')}             Display help for command`);
    output.push(`  ${chalk.cyan('-V, --version')}          Output the version number`);
    output.push(`  ${chalk.cyan('-a, --all')}              Run these 3 commands: ${chalk.green('build')}, ${chalk.green('build-fonts')} and ${chalk.green('purgetss')}`);

    return output.join('\n');
  }
})

// === INITIAL SETUP ===

// Init command
program
  .command('init')
  .alias('i')
  .description(`Create a ${chalk.yellow('config.cjs')} file for your project`)
  .option('--all', 'Create all files')
  .action(async (options) => {
    try {
      const result = await init(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running init:'), error.message)
      process.exit(1)
    }
  })

// Create command
program
  .command('create <name>')
  .alias('c')
  .description(`Create a new Alloy Project with ${chalk.green('PurgeTSS')} configured`)
  .option('-f, --force', 'Force create even if the project already exists')
  .option('-d, --dependencies', `Install ${chalk.green('ESLint')} and ${chalk.green('Tailwind CSS')}`)
  .option('-m, --module', `Install ${chalk.yellow('purgetss.ui.js')} module`)
  .option('-v, --vendor <vendor>', 'Install vendor fonts (e.g., fontawesome, materialicons)')
  .action((name, options) => {
    create({ name }, options)
  })

// Install Dependencies command
program
  .command('install-dependencies')
  .alias('id')
  .description(`Install ${chalk.green('ESLint')} and ${chalk.green('Tailwind CSS')} to an existing project\n`)
  .action(async (options) => {
    try {
      await dependencies(options)
    } catch (error) {
      console.error(chalk.red('Error installing dependencies:'), error.message)
      process.exit(1)
    }
  })

// === DAILY DEVELOPMENT ===

// Build command
program
  .command('build')
  .alias('b')
  .description(`Generate a new ${chalk.yellow('tailwind.tss')} file`)
  .option('--glossary', 'Create a glossary folder with all generated classes')
  .action(async (options) => {
    try {
      const result = await build(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running build:'), error.message)
      process.exit(1)
    }
  })

// Watch mode command
program
  .command('watch')
  .alias('w')
  .description(`Automatically run ${chalk.green('PurgeTSS')} every time you compile your project`)
  .option('-o, --off', 'To turn off watch mode')
  .option('-d, --delete', 'To completely delete the Auto-Purging hook')
  .action((options) => {
    try {
      watchMode(options)
    } catch (error) {
      console.error(chalk.red('Error managing watch mode:'), error.message)
      process.exit(1)
    }
  })

// Module command
program
  .command('module')
  .alias('m')
  .description(`Copy ${chalk.yellow('purgetss.ui.js')} module to your project's ${chalk.yellow('lib')} folder\n`)
  .action(async (options) => {
    try {
      await copyModulesLibrary(options)
    } catch (error) {
      console.error(chalk.red('Error copying module:'), error.message)
      process.exit(1)
    }
  })

// === ASSET CONFIGURATION ===

// Icon Library command (alias for copy-fonts)
program
  .command('icon-library')
  .alias('il')
  .description('Copy default icon font libraries to your project')
  .option('-v, --vendor <vendor>', 'Copy specific font vendors: fa, mi, ms, f7')
  .option('-m, --module', 'Copy corresponding CommonJS modules to ./app/lib/ folder')
  .option('-s, --styles', 'Copy corresponding .tss files to ./purgetss/styles/ folder')
  .action(async (options) => {
    try {
      await copyFonts(options)
    } catch (error) {
      console.error(chalk.red('Error copying icon libraries:'), error.message)
      process.exit(1)
    }
  })

// Build Fonts command
program
  .command('build-fonts')
  .alias('bf')
  .description(`Generate ${chalk.yellow('fonts.tss')} from font and CSS files in ${chalk.yellow('./purgetss/fonts')}`)
  .option('-f, --font-class-from-filename', 'Use the font\'s filename as the name of the font class and the CSS filename as prefix for icon classes instead of using font family names.')
  .option('-m, --module', `Generate a CommonJS module in the ${chalk.yellow('./app/lib/')} folder called ${chalk.yellow('purgetss-fonts.js')} containing all font classes for both regular fonts and font icons.`)
  .action(async (options) => {
    try {
      const result = await buildFonts(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running build-fonts:'), error.message)
      process.exit(1)
    }
  })

// Color Module command
program
  .command('color-module')
  .alias('cm')
  .description(`Copy all colors from ${chalk.yellow('config.cjs')} to your ${chalk.yellow('lib')} folder\n`)
  .action(async (options) => {
    try {
      const result = await colorModule(options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running color-module:'), error.message)
      process.exit(1)
    }
  })

// === UTILITIES ===

// Shades command
program
  .command('shades [hexcode]')
  .alias('s')
  .description('Generate color shades from a hex color\n')
  .option('-n, --name <n>', 'Name for the color family')
  .option('-r, --random', 'Generate random color')
  .option('-o, --override', 'Override existing color in theme.colors instead of theme.extend.colors')
  .option('-j, --json', 'Output as JSON')
  .option('-t, --tailwind', 'Output in Tailwind format')
  .option('-q, --quotes', 'Use quotes in output')
  .option('-s, --single', 'Generate single color instead of shades')
  .action(async (hexcode, options) => {
    try {
      const result = await shades({ hexcode, name: options.name }, options)
      if (!result) {
        process.exit(1)
      }
    } catch (error) {
      console.error(chalk.red('Error running shades:'), error.message)
      process.exit(1)
    }
  })

// === MAINTENANCE ===

// Update command
program
  .command('update')
  .alias('u')
  .description(`Update ${chalk.green('PurgeTSS')} to the latest version`)
  .action((options) => {
    console.log(`${chalk.green('::PurgeTSS::')} Updating ${chalk.green('PurgeTSS')} to the latest version...`)

    exec('npm update -g purgetss', (error, stdout, stderr) => {
      if (error) {
        console.log(`${chalk.green('::PurgeTSS::')} error: ${error.message}`)
        return
      }

      if (stderr) {
        console.log(`${chalk.green('::PurgeTSS::')} stderr: ${stderr}`)
        return
      }

      console.log(`${chalk.green('::PurgeTSS::')} Done!`)
    })
  })

// Sudo Update command
program
  .command('sudo-update')
  .alias('su')
  .description(`Update ${chalk.green('PurgeTSS')} to the latest version using the ${chalk.yellow('sudo')} command`)
  .action((options) => {
    console.log(`${chalk.green('::PurgeTSS::')} Updating ${chalk.green('PurgeTSS')} to the latest version using sudo...`)

    exec('sudo npm update -g purgetss', (error, stdout, stderr) => {
      if (error) {
        console.log(`${chalk.green('::PurgeTSS::')} error: ${error.message}`)
        return
      }

      if (stderr) {
        console.log(`${chalk.green('::PurgeTSS::')} stderr: ${stderr}`)
        return
      }

      console.log(`${chalk.green('::PurgeTSS::')} Done!`)
    })
  })

// Handle unknown commands and invalid arguments
program.configureOutput({
  outputError: (str, write) => {
    // Check if it's the "too many arguments" error and if there's a potential command name
    if (str.includes('too many arguments') && process.argv.length > 2) {
      const potentialCommand = process.argv[2]
      if (!potentialCommand.startsWith('-')) {
        write(chalk.red(`Unknown command: ${potentialCommand}\n`))
        write(`${chalk.yellow('Did you mean one of these?')}\n`)

        // Get all available commands
        const availableCommands = program.commands.map(cmd => ({
          name: cmd.name(),
          alias: cmd.alias()
        }))

        // Simple suggestion logic
        const suggestions = availableCommands.filter(cmd =>
          cmd.name.startsWith(potentialCommand.charAt(0)) ||
          (cmd.alias && cmd.alias.startsWith(potentialCommand.charAt(0)))
        )

        if (suggestions.length > 0) {
          suggestions.forEach(cmd => {
            write(`  ${chalk.cyan(cmd.name)}${cmd.alias ? `|${cmd.alias}` : ''}\n`)
          })
        } else {
          write(`  Run ${chalk.cyan('purgetss --help')} to see all available commands\n`)
        }
        return
      }
    }
    write(str)
  }
})

// Parse arguments
program.parse()
